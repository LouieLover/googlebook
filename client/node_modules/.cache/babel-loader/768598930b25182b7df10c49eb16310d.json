{"ast":null,"code":"import _objectSpread from\"/Users/LX/gt-ft/homework/googlebook/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/LX/gt-ft/homework/googlebook/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from\"react\";import{Link}from\"react-router-dom\";import{Col,Row,Container}from\"../components/Grid\";import Jumbotron from\"../components/Jumbotron\";import API from\"../utils/API\";import{List,ListItem}from\"../components/List\";import{Input,TextArea,FormBtn}from\"../components/Form\";import SaveBtn from\"../components/SaveBtn\";function Search(props){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),books=_useState2[0],setBooks=_useState2[1];var _useState3=useState({}),_useState4=_slicedToArray(_useState3,2),formObject=_useState4[0],setFormObject=_useState4[1];// When this component mounts, grab the book with the _id of props.match.params.id\n// e.g. localhost:3000/books/599dcb67f0f16317844583fc\n// const {id} = useParams()\n// useEffect(() => {\n//   API.getBook(id)\n//     .then(res => setBook(res.data))\n//     .catch(err => console.log(err));\n// }, [])\nfunction handleInputChange(event){var _event$target=event.target,name=_event$target.name,value=_event$target.value;setFormObject(_objectSpread(_objectSpread({},formObject),{},{[name]:value}));}// When the form is submitted, use the API.saveBook method to save the book data\n// Then reload books from the database\nfunction handleFormSubmit(event){event.preventDefault();if(formObject.title){API.searchBook(formObject.title).then(function(res){setBooks(res.data.items);}).catch(function(err){return console.log(err);});}}function saveBook(title,author,synopsis){API.saveBook({title:title,author:author,synopsis:synopsis}).then(function(res){return saveBook();}).catch(function(err){return console.log(err);});}return/*#__PURE__*/React.createElement(Container,{fluid:true},/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,{size:\"md-12\"},/*#__PURE__*/React.createElement(Jumbotron,null,/*#__PURE__*/React.createElement(\"h1\",null,\"What Books Should I Read?\")),/*#__PURE__*/React.createElement(\"form\",null,/*#__PURE__*/React.createElement(Input,{onChange:handleInputChange,name:\"title\",placeholder:\"Title (required)\"}),/*#__PURE__*/React.createElement(FormBtn,{disabled:!formObject.title,onClick:handleFormSubmit},\"Submit Search\")))),books.map(function(book){return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,{size:\"md-12\"},/*#__PURE__*/React.createElement(\"h1\",null,book.volumeInfo.title,\" by \",book.volumeInfo.authors.toString()))),/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,{size:\"md-10 md-offset-1\"},/*#__PURE__*/React.createElement(\"article\",null,/*#__PURE__*/React.createElement(\"h1\",null,\"Synopsis\"),/*#__PURE__*/React.createElement(\"p\",null,book.volumeInfo.description)))),/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,{size:\"md-2\"}),/*#__PURE__*/React.createElement(SaveBtn,{onClick:function onClick(){return saveBook(book.volumeInfo.title,book.volumeInfo.authors.toString(),book.volumeInfo.description);}})));}));}export default Search;","map":{"version":3,"sources":["/Users/LX/gt-ft/homework/googlebook/client/src/pages/Search.js"],"names":["React","useEffect","useState","Link","Col","Row","Container","Jumbotron","API","List","ListItem","Input","TextArea","FormBtn","SaveBtn","Search","props","books","setBooks","formObject","setFormObject","handleInputChange","event","target","name","value","handleFormSubmit","preventDefault","title","searchBook","then","res","data","items","catch","err","console","log","saveBook","author","synopsis","map","book","volumeInfo","authors","toString","description"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Col, Row, Container } from \"../components/Grid\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport API from \"../utils/API\";\nimport { List, ListItem } from \"../components/List\";\nimport { Input, TextArea, FormBtn } from \"../components/Form\";\nimport SaveBtn from \"../components/SaveBtn\";\n\nfunction Search(props) {\n  const [books, setBooks] = useState([]);\n  const [formObject, setFormObject] = useState({});\n\n  // When this component mounts, grab the book with the _id of props.match.params.id\n  // e.g. localhost:3000/books/599dcb67f0f16317844583fc\n  // const {id} = useParams()\n  // useEffect(() => {\n  //   API.getBook(id)\n  //     .then(res => setBook(res.data))\n  //     .catch(err => console.log(err));\n  // }, [])\n  function handleInputChange(event) {\n    const { name, value } = event.target;\n    setFormObject({ ...formObject, [name]: value });\n  }\n\n  // When the form is submitted, use the API.saveBook method to save the book data\n  // Then reload books from the database\n  function handleFormSubmit(event) {\n    event.preventDefault();\n    if (formObject.title) {\n      API.searchBook(formObject.title)\n        .then((res) => {\n          setBooks(res.data.items);\n        })\n        .catch((err) => console.log(err));\n    }\n  }\n\n  function saveBook(title, author, synopsis) {\n    API.saveBook({\n      title: title,\n      author: author,\n      synopsis: synopsis,\n    })\n      .then((res) => saveBook())\n      .catch((err) => console.log(err));\n  }\n\n  return (\n    <Container fluid>\n      <Row>\n        <Col size=\"md-12\">\n          <Jumbotron>\n            <h1>What Books Should I Read?</h1>\n          </Jumbotron>\n          <form>\n            <Input\n              onChange={handleInputChange}\n              name=\"title\"\n              placeholder=\"Title (required)\"\n            />\n            <FormBtn disabled={!formObject.title} onClick={handleFormSubmit}>\n              Submit Search\n            </FormBtn>\n          </form>\n        </Col>\n      </Row>\n      {books.map((book) => (\n        <>\n          <Row>\n            <Col size=\"md-12\">\n              <h1>\n                {book.volumeInfo.title} by {book.volumeInfo.authors.toString()}\n              </h1>\n            </Col>\n          </Row>\n          <Row>\n            <Col size=\"md-10 md-offset-1\">\n              <article>\n                <h1>Synopsis</h1>\n                <p>{book.volumeInfo.description}</p>\n              </article>\n            </Col>\n          </Row>\n          <Row>\n            <Col size=\"md-2\"></Col>\n            <SaveBtn\n              onClick={() =>\n                saveBook(\n                  book.volumeInfo.title,\n                  book.volumeInfo.authors.toString(),\n                  book.volumeInfo.description\n                )\n              }\n            />\n          </Row>\n        </>\n      ))}\n    </Container>\n  );\n}\n\nexport default Search;\n"]},"metadata":{},"sourceType":"module"}